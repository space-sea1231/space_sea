"struct Segment_Tree{",
"    int a[N];",
"    struct node{",
"        int sum, vis_add, vis_mul;",
"    }e[N*2];",
"    void build(int x, int l, int r){",
"        int mid=(l+r)>>1;",
"        e[x].vis_mul=1;",
"        if (l==r){",
"            e[x].sum=a[l];",
"            return;",
"        }",
"        build(x<<1, l, mid);",
"        build(x<<1|1, mid+1, r);",
"        e[x].sum+=e[x<<1|1].sum;",
"    }",
"    void down(int x, int l, int r){",
"        int mid=(l+r)>>1;",
"        e[x<<1].sum=e[x<<1].sum*e[x].vis_mul+(mid-l+1)*e[x].vis_add;",
"        e[x<<1|1].sum=e[x<<1|1].sum*e[x].vis_mul+(r-mid)*e[x].vis_add;",
"        e[x<<1].vis_add=e[x<<1].vis_add*e[x].vis_mul+e[x].vis_add;",
"        e[x<<1|1].vis_add=e[x<<1|1].vis_add*e[x].vis_mul+e[x].vis_add;",
"        e[x<<1].vis_mul*=e[x].vis_mul;",
"        e[x<<1|1].vis_mul*=e[x].vis_mul;",
"        e[x].vis_add=0, e[x].vis_mul=1;",
"    }",
"    void mul(int x, int l, int r, int L, int R, int w){",
"        if (L<=l&&r<=R){",
"            e[x].vis_add=e[x].vis_add*w;",
"            e[x].vis_mul=e[x].vis_mul*w;",
"            e[x].sum=e[x].sum*w;",
"            return;",
"        }",
"        down(x, l, r);",
"        int mid=(l+r)>>1;",
"        if (L<=mid){",
"            mul(x<<1, l, mid, L, R, w);",
"        }",
"        if (mid+1<=R){",
"            mul(x<<1|1, mid+1, r, L, R, w);",
"        }",
"        e[x].sum=e[x<<1].sum+e[x<<1|1].sum;",
"    }",
"    void add(int x, int l, int r, int L, int R, int w){",
"        if (L<=l&&r<=R){",
"            e[x].vis_add+=w;",
"            e[x].sum+=(r-l+1)*w;",
"            return;",
"        }",
"        down(x, l, r);",
"        int mid=(l+r)>>1;",
"        if (L<=mid){",
"            add(x<<1, l, mid, L, R, w);",
"        }",
"        if (mid+1<=R){",
"            add(x<<1|1, mid+1, r, L, R, w);",
"        }",
"        e[x].sum=e[x<<1].sum+e[x<<1|1].sum;",
"    }",
"    int sum(int x, int l, int r, int L, int R){",
"        if (L<=l&&r<=R){",
"            return e[x].sum;",
"        }",
"        down(x, l, r);",
"        int mid=(l+r)>>1, ans=0;",
"        if (L<=mid){",
"            ans+=sum(x<<1, l, mid, L, R);",
"        }",
"        if (mid+1<=R){",
"            ans+=sum(x<<1|1, mid+1, r, L, R);",
"        }",
"        return ans;",
"    }",
"}",
