"struct Blocking{",
"    int siz;",
"    int L[N], R[N];",
"    int pos[N], sum[N], vis[N];",
"    void Add(int x, int y, int z){",
"        int x=pos[x], y=pos[y];",
"        if (x==y){",
"            for (int i=x; i<=y; i++){",
"                a[i]+=z;",
"            }",
"            sum[x]+=(y-x+1)*z;  ",
"        }else{",
"            for (int i=x+1; i<=y-1; i++){",
"                vis[i]+=z;",
"            }",
"            for (int i=x; i<=R[x]; i++){",
"                a[i]+=z;",
"            }",
"            sum[x]+=(R[x]-x+1)*z;",
"            for (int i=L[y]; i<=y; i++){",
"                a[i]+=z;",
"            }",
"            sum[y]+=(y-L[y]+1)*z;",
"        }",
"    }",
"    int Query(int l, int r){",
"        int x=pos[l], y=pos[r];",
"        int ans=0;",
"        if (x==y){",
"            for (int i=l; i<=r; i++){",
"                ans+=a[i];",
"            }",
"            ans+=(r-l+1)*vis[x];",
"        }else{",
"            for (int i=l; i<=R[x]; i++){",
"                ans+=a[i]+vis[x];",
"            }",
"            for (int i=L[y]; i<=r; i++){",
"                ans+=a[i]+vis[y];",
"            }",
"            for (int i=x+1; i<=y-1; i++){",
"                ans+=sum[i]+vis[i]*(R[i]-L[i]+1);",
"            }",
"        }",
"        return ans;",
"    }",
"    void Init(){",
"        siz=sqrt(n);",
"        for (int i=1; i<=n; i++){",
"            L[i]=(i-1)*siz+1;",
"            R[i]=i*siz;",
"        }",
"        if (R[siz]<n){",
"            siz++;",
"            L[siz]=R[siz-1]+1;",
"            R[siz]=n;",
"        }",
"        for (int i=1; i<=siz; i++){",
"            for (int j=L[i]; j<=R[i]; j++){",
"                pos[j]=i;",
"                sum[i]+=a[j];",
"            }",
"        }",
"    }",
"}",
